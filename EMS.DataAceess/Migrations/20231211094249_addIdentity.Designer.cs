// <auto-generated />
using System;
using EMS.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMS.DataAceess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231211094249_addIdentity")]
    partial class addIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EMS.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("attendance_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("attendance_e_id")
                        .HasColumnType("int");

                    b.Property<string>("attendance_in_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("attendance_in_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("attendance_out_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("attendance_out_time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("attendance_e_id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("EMS.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department_Name = "Legal"
                        },
                        new
                        {
                            Id = 2,
                            Department_Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            Department_Name = "Training"
                        },
                        new
                        {
                            Id = 4,
                            Department_Name = "Accounting"
                        },
                        new
                        {
                            Id = 5,
                            Department_Name = "Sales"
                        },
                        new
                        {
                            Id = 6,
                            Department_Name = "Engineering"
                        },
                        new
                        {
                            Id = 7,
                            Department_Name = "Legal"
                        },
                        new
                        {
                            Id = 8,
                            Department_Name = "Sales"
                        },
                        new
                        {
                            Id = 9,
                            Department_Name = "Human Resources"
                        },
                        new
                        {
                            Id = 10,
                            Department_Name = "Research and Development"
                        });
                });

            modelBuilder.Entity("EMS.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Emp_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emp_Cid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Emp_DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Emp_Department_id")
                        .HasColumnType("int");

                    b.Property<int>("Emp_Gender_id")
                        .HasColumnType("int");

                    b.Property<int>("Emp_Is_active")
                        .HasColumnType("int");

                    b.Property<int>("Emp_NIC")
                        .HasColumnType("int");

                    b.Property<string>("Emp_contact_info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emp_dp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emp_full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Emp_job_title_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Emp_start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Emp_Department_id");

                    b.HasIndex("Emp_Gender_id");

                    b.HasIndex("Emp_job_title_id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Emp_Address = "20403 Bunker Hill Lane",
                            Emp_Cid = "509280",
                            Emp_DateOfBirth = new DateTime(1972, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 2,
                            Emp_Gender_id = 2,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "190-481-6403",
                            Emp_dp = "Crimson",
                            Emp_full_name = "Jeanie Norrie",
                            Emp_job_title_id = 7,
                            Emp_start_date = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Emp_Address = "05080 Village Place",
                            Emp_Cid = "583367",
                            Emp_DateOfBirth = new DateTime(1973, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 5,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "231-972-7579",
                            Emp_dp = "Red",
                            Emp_full_name = "Arabele Millwater",
                            Emp_job_title_id = 7,
                            Emp_start_date = new DateTime(2016, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Emp_Address = "81 Carioca Lane",
                            Emp_Cid = "751033",
                            Emp_DateOfBirth = new DateTime(1971, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 3,
                            Emp_Gender_id = 2,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "299-264-5583",
                            Emp_dp = "Mauv",
                            Emp_full_name = "Karen Solomon",
                            Emp_job_title_id = 1,
                            Emp_start_date = new DateTime(2012, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Emp_Address = "94 Towne Avenue",
                            Emp_Cid = "239178",
                            Emp_DateOfBirth = new DateTime(1966, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 4,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "496-189-7339",
                            Emp_dp = "Blue",
                            Emp_full_name = "Seamus Yeoman",
                            Emp_job_title_id = 6,
                            Emp_start_date = new DateTime(2012, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Emp_Address = "59664 Gina Crossing",
                            Emp_Cid = "663442",
                            Emp_DateOfBirth = new DateTime(1988, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 3,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "260-523-1239",
                            Emp_dp = "Goldenrod",
                            Emp_full_name = "Vincenty Frankcombe",
                            Emp_job_title_id = 10,
                            Emp_start_date = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Emp_Address = "9979 Vernon Street",
                            Emp_Cid = "723826",
                            Emp_DateOfBirth = new DateTime(1992, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 3,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "773-437-6039",
                            Emp_dp = "Fuscia",
                            Emp_full_name = "Tybalt Alldridge",
                            Emp_job_title_id = 8,
                            Emp_start_date = new DateTime(2013, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Emp_Address = "0 7th Place",
                            Emp_Cid = "332886",
                            Emp_DateOfBirth = new DateTime(1971, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 4,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "250-398-3300",
                            Emp_dp = "Puce",
                            Emp_full_name = "Amye Adcock",
                            Emp_job_title_id = 4,
                            Emp_start_date = new DateTime(2017, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Emp_Address = "92 Pawling Alley",
                            Emp_Cid = "681434",
                            Emp_DateOfBirth = new DateTime(1988, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 1,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "752-372-2010",
                            Emp_dp = "Aquamarine",
                            Emp_full_name = "Frasier Shrigley",
                            Emp_job_title_id = 2,
                            Emp_start_date = new DateTime(2021, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Emp_Address = "63 Manley Terrace",
                            Emp_Cid = "857369",
                            Emp_DateOfBirth = new DateTime(1983, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 4,
                            Emp_Gender_id = 2,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "512-765-9897",
                            Emp_dp = "Red",
                            Emp_full_name = "Magda Spraberry",
                            Emp_job_title_id = 4,
                            Emp_start_date = new DateTime(2021, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Emp_Address = "9 Caliangt Pass",
                            Emp_Cid = "637020",
                            Emp_DateOfBirth = new DateTime(1961, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 2,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "426-464-2982",
                            Emp_dp = "Purple",
                            Emp_full_name = "Maressa Gheorghe",
                            Emp_job_title_id = 10,
                            Emp_start_date = new DateTime(2019, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Emp_Address = "114 Bonner Center",
                            Emp_Cid = "685841",
                            Emp_DateOfBirth = new DateTime(1967, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 2,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 2,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "100-113-6495",
                            Emp_dp = "Fuscia",
                            Emp_full_name = "Bambie Selbie",
                            Emp_job_title_id = 6,
                            Emp_start_date = new DateTime(2017, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Emp_Address = "0658 Artisan Drive",
                            Emp_Cid = "728440",
                            Emp_DateOfBirth = new DateTime(1965, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 2,
                            Emp_Gender_id = 2,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "850-277-8474",
                            Emp_dp = "Aquamarine",
                            Emp_full_name = "Darwin Callington",
                            Emp_job_title_id = 8,
                            Emp_start_date = new DateTime(2021, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Emp_Address = "2305 Stuart Drive",
                            Emp_Cid = "672909",
                            Emp_DateOfBirth = new DateTime(1998, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 3,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "255-334-1273",
                            Emp_dp = "Yellow",
                            Emp_full_name = "Basilio Longhi",
                            Emp_job_title_id = 8,
                            Emp_start_date = new DateTime(2021, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Emp_Address = "574 Gulseth Crossing",
                            Emp_Cid = "275978",
                            Emp_DateOfBirth = new DateTime(1983, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 3,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "157-963-7726",
                            Emp_dp = "Violet",
                            Emp_full_name = "Hewet Sorrell",
                            Emp_job_title_id = 1,
                            Emp_start_date = new DateTime(2016, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Emp_Address = "06 Mayfield Junction",
                            Emp_Cid = "466923",
                            Emp_DateOfBirth = new DateTime(1964, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Emp_Department_id = 1,
                            Emp_Gender_id = 1,
                            Emp_Is_active = 1,
                            Emp_NIC = 654654646,
                            Emp_contact_info = "831-374-8100",
                            Emp_dp = "Violet",
                            Emp_full_name = "Dorothea Cantera",
                            Emp_job_title_id = 9,
                            Emp_start_date = new DateTime(2015, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EMS.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = 2,
                            GenderName = "Female"
                        });
                });

            modelBuilder.Entity("EMS.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EmpoyeeEPF")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EmpoyeerEPF")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EmpoyeerETF")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SalaryTypeID")
                        .HasColumnType("int");

                    b.Property<string>("jt_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalaryTypeID");

                    b.ToTable("JobTitles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 1500.00m,
                            EmpoyeeEPF = 0m,
                            EmpoyeerEPF = 0m,
                            EmpoyeerETF = 0m,
                            SalaryTypeID = 1,
                            jt_name = "Job Title 1"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 55000.00m,
                            EmpoyeeEPF = 4400.0000m,
                            EmpoyeerEPF = 6600.0000m,
                            EmpoyeerETF = 1650.0000m,
                            SalaryTypeID = 2,
                            jt_name = "Job Title 2"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 1600.00m,
                            EmpoyeeEPF = 0m,
                            EmpoyeerEPF = 0m,
                            EmpoyeerETF = 0m,
                            SalaryTypeID = 1,
                            jt_name = "Job Title 3"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 65000.00m,
                            EmpoyeeEPF = 5200.0000m,
                            EmpoyeerEPF = 7800.0000m,
                            EmpoyeerETF = 1950.0000m,
                            SalaryTypeID = 2,
                            jt_name = "Job Title 4"
                        },
                        new
                        {
                            Id = 5,
                            BaseSalary = 1700.00m,
                            EmpoyeeEPF = 0m,
                            EmpoyeerEPF = 0m,
                            EmpoyeerETF = 0m,
                            SalaryTypeID = 1,
                            jt_name = "Job Title 5"
                        },
                        new
                        {
                            Id = 6,
                            BaseSalary = 75000.00m,
                            EmpoyeeEPF = 6000.0000m,
                            EmpoyeerEPF = 9000.0000m,
                            EmpoyeerETF = 2250.0000m,
                            SalaryTypeID = 2,
                            jt_name = "Job Title 6"
                        },
                        new
                        {
                            Id = 7,
                            BaseSalary = 1800.00m,
                            EmpoyeeEPF = 0m,
                            EmpoyeerEPF = 0m,
                            EmpoyeerETF = 0m,
                            SalaryTypeID = 1,
                            jt_name = "Job Title 7"
                        },
                        new
                        {
                            Id = 8,
                            BaseSalary = 85000.00m,
                            EmpoyeeEPF = 6800.0000m,
                            EmpoyeerEPF = 10200.0000m,
                            EmpoyeerETF = 2550.0000m,
                            SalaryTypeID = 2,
                            jt_name = "Job Title 8"
                        },
                        new
                        {
                            Id = 9,
                            BaseSalary = 2900.00m,
                            EmpoyeeEPF = 0m,
                            EmpoyeerEPF = 0m,
                            EmpoyeerETF = 0m,
                            SalaryTypeID = 1,
                            jt_name = "Job Title 9"
                        },
                        new
                        {
                            Id = 10,
                            BaseSalary = 95000.00m,
                            EmpoyeeEPF = 7600.0000m,
                            EmpoyeerEPF = 11400.0000m,
                            EmpoyeerETF = 2850.0000m,
                            SalaryTypeID = 2,
                            jt_name = "Job Title 10"
                        });
                });

            modelBuilder.Entity("EMS.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Employees_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Leave_Acommencement_Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Leave_Apply_Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Leave_Approved_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Leave_Approved_by")
                        .HasColumnType("int");

                    b.Property<string>("Leave_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Leave_Return_Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Leave_Type_Id")
                        .HasColumnType("int");

                    b.Property<int>("Number_of_Days")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Employees_Id");

                    b.HasIndex("Leave_Type_Id");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("EMS.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Leave_Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Leave_Type_Name = "Sick Leave"
                        },
                        new
                        {
                            Id = 2,
                            Leave_Type_Name = "Personal Leave"
                        },
                        new
                        {
                            Id = 4,
                            Leave_Type_Name = "Other Leave"
                        },
                        new
                        {
                            Id = 3,
                            Leave_Type_Name = "Vacation Leave"
                        });
                });

            modelBuilder.Entity("EMS.Models.PayRoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Advanced")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Allowances")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal>("NetBasicSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("PayedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PraperedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PayRolls");
                });

            modelBuilder.Entity("EMS.Models.SalaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("st_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalaryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            st_name = "Daily"
                        },
                        new
                        {
                            Id = 2,
                            st_name = "Monthly"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EMS.Models.Attendance", b =>
                {
                    b.HasOne("EMS.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("attendance_e_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EMS.Models.Employee", b =>
                {
                    b.HasOne("EMS.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("Emp_Department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("Emp_Gender_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("Emp_job_title_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Gender");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("EMS.Models.JobTitle", b =>
                {
                    b.HasOne("EMS.Models.SalaryType", "SalaryType")
                        .WithMany()
                        .HasForeignKey("SalaryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalaryType");
                });

            modelBuilder.Entity("EMS.Models.Leave", b =>
                {
                    b.HasOne("EMS.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("Employees_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EMS.Models.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("Leave_Type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("EMS.Models.PayRoll", b =>
                {
                    b.HasOne("EMS.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
